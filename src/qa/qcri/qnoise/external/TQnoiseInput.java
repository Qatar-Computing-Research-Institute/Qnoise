/*
 * Copyright (c) Qatar Computing Research Institute, 2013.
 * Licensed under the MIT license <http://www.opensource.org/licenses/MIT>.
 */

/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package qa.qcri.qnoise.external;

import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;
import org.apache.thrift.scheme.TupleScheme;

import java.util.*;

public class TQnoiseInput implements org.apache.thrift.TBase<TQnoiseInput, TQnoiseInput._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TQnoiseInput");

  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.LIST, (short)1);
  private static final org.apache.thrift.protocol.TField SPECS_FIELD_DESC = new org.apache.thrift.protocol.TField("specs", org.apache.thrift.protocol.TType.LIST, (short)2);
  private static final org.apache.thrift.protocol.TField HEADER_FIELD_DESC = new org.apache.thrift.protocol.TField("header", org.apache.thrift.protocol.TType.LIST, (short)3);
  private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.LIST, (short)4);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TQnoiseInputStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TQnoiseInputTupleSchemeFactory());
  }

  private List<List<String>> data; // required
  private List<TQnoiseSpec> specs; // required
  private List<String> header; // optional
  private List<String> type; // optional

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    DATA((short)1, "data"),
    SPECS((short)2, "specs"),
    HEADER((short)3, "header"),
    TYPE((short)4, "type");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // DATA
          return DATA;
        case 2: // SPECS
          return SPECS;
        case 3: // HEADER
          return HEADER;
        case 4: // TYPE
          return TYPE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private _Fields optionals[] = {_Fields.HEADER,_Fields.TYPE};
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)))));
    tmpMap.put(_Fields.SPECS, new org.apache.thrift.meta_data.FieldMetaData("specs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT, TQnoiseSpec.class))));
    tmpMap.put(_Fields.HEADER, new org.apache.thrift.meta_data.FieldMetaData("header", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TQnoiseInput.class, metaDataMap);
  }

  public TQnoiseInput() {
  }

  public TQnoiseInput(
    List<List<String>> data,
    List<TQnoiseSpec> specs)
  {
    this();
    this.data = data;
    this.specs = specs;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TQnoiseInput(TQnoiseInput other) {
    if (other.isSetData()) {
      List<List<String>> __this__data = new ArrayList<List<String>>();
      for (List<String> other_element : other.data) {
        List<String> __this__data_copy = new ArrayList<String>();
        for (String other_element_element : other_element) {
          __this__data_copy.add(other_element_element);
        }
        __this__data.add(__this__data_copy);
      }
      this.data = __this__data;
    }
    if (other.isSetSpecs()) {
      List<TQnoiseSpec> __this__specs = new ArrayList<TQnoiseSpec>();
      for (TQnoiseSpec other_element : other.specs) {
        __this__specs.add(new TQnoiseSpec(other_element));
      }
      this.specs = __this__specs;
    }
    if (other.isSetHeader()) {
      List<String> __this__header = new ArrayList<String>();
      for (String other_element : other.header) {
        __this__header.add(other_element);
      }
      this.header = __this__header;
    }
    if (other.isSetType()) {
      List<String> __this__type = new ArrayList<String>();
      for (String other_element : other.type) {
        __this__type.add(other_element);
      }
      this.type = __this__type;
    }
  }

  public TQnoiseInput deepCopy() {
    return new TQnoiseInput(this);
  }

  @Override
  public void clear() {
    this.data = null;
    this.specs = null;
    this.header = null;
    this.type = null;
  }

  public int getDataSize() {
    return (this.data == null) ? 0 : this.data.size();
  }

  public java.util.Iterator<List<String>> getDataIterator() {
    return (this.data == null) ? null : this.data.iterator();
  }

  public void addToData(List<String> elem) {
    if (this.data == null) {
      this.data = new ArrayList<List<String>>();
    }
    this.data.add(elem);
  }

  public List<List<String>> getData() {
    return this.data;
  }

  public TQnoiseInput setData(List<List<String>> data) {
    this.data = data;
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public int getSpecsSize() {
    return (this.specs == null) ? 0 : this.specs.size();
  }

  public java.util.Iterator<TQnoiseSpec> getSpecsIterator() {
    return (this.specs == null) ? null : this.specs.iterator();
  }

  public void addToSpecs(TQnoiseSpec elem) {
    if (this.specs == null) {
      this.specs = new ArrayList<TQnoiseSpec>();
    }
    this.specs.add(elem);
  }

  public List<TQnoiseSpec> getSpecs() {
    return this.specs;
  }

  public TQnoiseInput setSpecs(List<TQnoiseSpec> specs) {
    this.specs = specs;
    return this;
  }

  public void unsetSpecs() {
    this.specs = null;
  }

  /** Returns true if field specs is set (has been assigned a value) and false otherwise */
  public boolean isSetSpecs() {
    return this.specs != null;
  }

  public void setSpecsIsSet(boolean value) {
    if (!value) {
      this.specs = null;
    }
  }

  public int getHeaderSize() {
    return (this.header == null) ? 0 : this.header.size();
  }

  public java.util.Iterator<String> getHeaderIterator() {
    return (this.header == null) ? null : this.header.iterator();
  }

  public void addToHeader(String elem) {
    if (this.header == null) {
      this.header = new ArrayList<String>();
    }
    this.header.add(elem);
  }

  public List<String> getHeader() {
    return this.header;
  }

  public TQnoiseInput setHeader(List<String> header) {
    this.header = header;
    return this;
  }

  public void unsetHeader() {
    this.header = null;
  }

  /** Returns true if field header is set (has been assigned a value) and false otherwise */
  public boolean isSetHeader() {
    return this.header != null;
  }

  public void setHeaderIsSet(boolean value) {
    if (!value) {
      this.header = null;
    }
  }

  public int getTypeSize() {
    return (this.type == null) ? 0 : this.type.size();
  }

  public java.util.Iterator<String> getTypeIterator() {
    return (this.type == null) ? null : this.type.iterator();
  }

  public void addToType(String elem) {
    if (this.type == null) {
      this.type = new ArrayList<String>();
    }
    this.type.add(elem);
  }

  public List<String> getType() {
    return this.type;
  }

  public TQnoiseInput setType(List<String> type) {
    this.type = type;
    return this;
  }

  public void unsetType() {
    this.type = null;
  }

  /** Returns true if field type is set (has been assigned a value) and false otherwise */
  public boolean isSetType() {
    return this.type != null;
  }

  public void setTypeIsSet(boolean value) {
    if (!value) {
      this.type = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case DATA:
      if (value == null) {
        unsetData();
      } else {
        setData((List<List<String>>)value);
      }
      break;

    case SPECS:
      if (value == null) {
        unsetSpecs();
      } else {
        setSpecs((List<TQnoiseSpec>)value);
      }
      break;

    case HEADER:
      if (value == null) {
        unsetHeader();
      } else {
        setHeader((List<String>)value);
      }
      break;

    case TYPE:
      if (value == null) {
        unsetType();
      } else {
        setType((List<String>)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case DATA:
      return getData();

    case SPECS:
      return getSpecs();

    case HEADER:
      return getHeader();

    case TYPE:
      return getType();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case DATA:
      return isSetData();
    case SPECS:
      return isSetSpecs();
    case HEADER:
      return isSetHeader();
    case TYPE:
      return isSetType();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TQnoiseInput)
      return this.equals((TQnoiseInput)that);
    return false;
  }

  public boolean equals(TQnoiseInput that) {
    if (that == null)
      return false;

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_specs = true && this.isSetSpecs();
    boolean that_present_specs = true && that.isSetSpecs();
    if (this_present_specs || that_present_specs) {
      if (!(this_present_specs && that_present_specs))
        return false;
      if (!this.specs.equals(that.specs))
        return false;
    }

    boolean this_present_header = true && this.isSetHeader();
    boolean that_present_header = true && that.isSetHeader();
    if (this_present_header || that_present_header) {
      if (!(this_present_header && that_present_header))
        return false;
      if (!this.header.equals(that.header))
        return false;
    }

    boolean this_present_type = true && this.isSetType();
    boolean that_present_type = true && that.isSetType();
    if (this_present_type || that_present_type) {
      if (!(this_present_type && that_present_type))
        return false;
      if (!this.type.equals(that.type))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(TQnoiseInput other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    TQnoiseInput typedOther = (TQnoiseInput)other;

    lastComparison = Boolean.valueOf(isSetData()).compareTo(typedOther.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, typedOther.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSpecs()).compareTo(typedOther.isSetSpecs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSpecs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.specs, typedOther.specs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHeader()).compareTo(typedOther.isSetHeader());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHeader()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.header, typedOther.header);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetType()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TQnoiseInput(");
    boolean first = true;

    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      sb.append(this.data);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("specs:");
    if (this.specs == null) {
      sb.append("null");
    } else {
      sb.append(this.specs);
    }
    first = false;
    if (isSetHeader()) {
      if (!first) sb.append(", ");
      sb.append("header:");
      if (this.header == null) {
        sb.append("null");
      } else {
        sb.append(this.header);
      }
      first = false;
    }
    if (isSetType()) {
      if (!first) sb.append(", ");
      sb.append("type:");
      if (this.type == null) {
        sb.append("null");
      } else {
        sb.append(this.type);
      }
      first = false;
    }
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    if (data == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'data' was not present! Struct: " + toString());
    }
    if (specs == null) {
      throw new org.apache.thrift.protocol.TProtocolException("Required field 'specs' was not present! Struct: " + toString());
    }
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TQnoiseInputStandardSchemeFactory implements SchemeFactory {
    public TQnoiseInputStandardScheme getScheme() {
      return new TQnoiseInputStandardScheme();
    }
  }

  private static class TQnoiseInputStandardScheme extends StandardScheme<TQnoiseInput> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TQnoiseInput struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list24 = iprot.readListBegin();
                struct.data = new ArrayList<List<String>>(_list24.size);
                for (int _i25 = 0; _i25 < _list24.size; ++_i25)
                {
                  List<String> _elem26; // required
                  {
                    org.apache.thrift.protocol.TList _list27 = iprot.readListBegin();
                    _elem26 = new ArrayList<String>(_list27.size);
                    for (int _i28 = 0; _i28 < _list27.size; ++_i28)
                    {
                      String _elem29; // required
                      _elem29 = iprot.readString();
                      _elem26.add(_elem29);
                    }
                    iprot.readListEnd();
                  }
                  struct.data.add(_elem26);
                }
                iprot.readListEnd();
              }
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // SPECS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list30 = iprot.readListBegin();
                struct.specs = new ArrayList<TQnoiseSpec>(_list30.size);
                for (int _i31 = 0; _i31 < _list30.size; ++_i31)
                {
                  TQnoiseSpec _elem32; // required
                  _elem32 = new TQnoiseSpec();
                  _elem32.read(iprot);
                  struct.specs.add(_elem32);
                }
                iprot.readListEnd();
              }
              struct.setSpecsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // HEADER
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list33 = iprot.readListBegin();
                struct.header = new ArrayList<String>(_list33.size);
                for (int _i34 = 0; _i34 < _list33.size; ++_i34)
                {
                  String _elem35; // required
                  _elem35 = iprot.readString();
                  struct.header.add(_elem35);
                }
                iprot.readListEnd();
              }
              struct.setHeaderIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // TYPE
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list36 = iprot.readListBegin();
                struct.type = new ArrayList<String>(_list36.size);
                for (int _i37 = 0; _i37 < _list36.size; ++_i37)
                {
                  String _elem38; // required
                  _elem38 = iprot.readString();
                  struct.type.add(_elem38);
                }
                iprot.readListEnd();
              }
              struct.setTypeIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TQnoiseInput struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, struct.data.size()));
          for (List<String> _iter39 : struct.data)
          {
            {
              oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, _iter39.size()));
              for (String _iter40 : _iter39)
              {
                oprot.writeString(_iter40);
              }
              oprot.writeListEnd();
            }
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.specs != null) {
        oprot.writeFieldBegin(SPECS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, struct.specs.size()));
          for (TQnoiseSpec _iter41 : struct.specs)
          {
            _iter41.write(oprot);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.header != null) {
        if (struct.isSetHeader()) {
          oprot.writeFieldBegin(HEADER_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.header.size()));
            for (String _iter42 : struct.header)
            {
              oprot.writeString(_iter42);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      if (struct.type != null) {
        if (struct.isSetType()) {
          oprot.writeFieldBegin(TYPE_FIELD_DESC);
          {
            oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.type.size()));
            for (String _iter43 : struct.type)
            {
              oprot.writeString(_iter43);
            }
            oprot.writeListEnd();
          }
          oprot.writeFieldEnd();
        }
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TQnoiseInputTupleSchemeFactory implements SchemeFactory {
    public TQnoiseInputTupleScheme getScheme() {
      return new TQnoiseInputTupleScheme();
    }
  }

  private static class TQnoiseInputTupleScheme extends TupleScheme<TQnoiseInput> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TQnoiseInput struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      {
        oprot.writeI32(struct.data.size());
        for (List<String> _iter44 : struct.data)
        {
          {
            oprot.writeI32(_iter44.size());
            for (String _iter45 : _iter44)
            {
              oprot.writeString(_iter45);
            }
          }
        }
      }
      {
        oprot.writeI32(struct.specs.size());
        for (TQnoiseSpec _iter46 : struct.specs)
        {
          _iter46.write(oprot);
        }
      }
      BitSet optionals = new BitSet();
      if (struct.isSetHeader()) {
        optionals.set(0);
      }
      if (struct.isSetType()) {
        optionals.set(1);
      }
      oprot.writeBitSet(optionals, 2);
      if (struct.isSetHeader()) {
        {
          oprot.writeI32(struct.header.size());
          for (String _iter47 : struct.header)
          {
            oprot.writeString(_iter47);
          }
        }
      }
      if (struct.isSetType()) {
        {
          oprot.writeI32(struct.type.size());
          for (String _iter48 : struct.type)
          {
            oprot.writeString(_iter48);
          }
        }
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TQnoiseInput struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      {
        org.apache.thrift.protocol.TList _list49 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.LIST, iprot.readI32());
        struct.data = new ArrayList<List<String>>(_list49.size);
        for (int _i50 = 0; _i50 < _list49.size; ++_i50)
        {
          List<String> _elem51; // required
          {
            org.apache.thrift.protocol.TList _list52 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
            _elem51 = new ArrayList<String>(_list52.size);
            for (int _i53 = 0; _i53 < _list52.size; ++_i53)
            {
              String _elem54; // required
              _elem54 = iprot.readString();
              _elem51.add(_elem54);
            }
          }
          struct.data.add(_elem51);
        }
      }
      struct.setDataIsSet(true);
      {
        org.apache.thrift.protocol.TList _list55 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRUCT, iprot.readI32());
        struct.specs = new ArrayList<TQnoiseSpec>(_list55.size);
        for (int _i56 = 0; _i56 < _list55.size; ++_i56)
        {
          TQnoiseSpec _elem57; // required
          _elem57 = new TQnoiseSpec();
          _elem57.read(iprot);
          struct.specs.add(_elem57);
        }
      }
      struct.setSpecsIsSet(true);
      BitSet incoming = iprot.readBitSet(2);
      if (incoming.get(0)) {
        {
          org.apache.thrift.protocol.TList _list58 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.header = new ArrayList<String>(_list58.size);
          for (int _i59 = 0; _i59 < _list58.size; ++_i59)
          {
            String _elem60; // required
            _elem60 = iprot.readString();
            struct.header.add(_elem60);
          }
        }
        struct.setHeaderIsSet(true);
      }
      if (incoming.get(1)) {
        {
          org.apache.thrift.protocol.TList _list61 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.type = new ArrayList<String>(_list61.size);
          for (int _i62 = 0; _i62 < _list61.size; ++_i62)
          {
            String _elem63; // required
            _elem63 = iprot.readString();
            struct.type.add(_elem63);
          }
        }
        struct.setTypeIsSet(true);
      }
    }
  }

}

